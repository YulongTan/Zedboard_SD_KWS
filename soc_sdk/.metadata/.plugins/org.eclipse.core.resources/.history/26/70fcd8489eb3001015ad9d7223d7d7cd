/******************************************************************************
* Copyright (c) 2013 - 2020 Xilinx, Inc.  All rights reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/

/***************************** Include Files *********************************/
#include <stdio.h>
#include "sleep.h"
#include "xparameters.h"	/* SDK generated parameters */
#include "xplatform_info.h"
#include "xil_printf.h"
#include "xil_cache.h"
#include "xsdps.h"			/* SD device driver */
#include "ff.h"
//kws network
#include "./kws/kws_engine.h"
/************************** Constant Definitions *****************************/

/**************************** Type Definitions *******************************/

/***************** Macros (Inline Functions) Definitions *********************/

/************************** Function Prototypes ******************************/

/************************** Variable Definitions *****************************/
#define AUDIO_SAMPLING_RATE	  96000

// Number of samples to record/playback
#define NR_AUDIO_SAMPLES		(NR_SEC_TO_REC_PLAY*AUDIO_SAMPLING_RATE)
#define KWS_DMA_TRANSFER_BYTES		(1U * NR_AUDIO_SAMPLES)
/************************** Buffer Setting *****************************/

int main(void)
{
	int Status;

	xil_printf("\r\n--- Entering main() --- \r\n");

	Status = KwsEngine_Initialize(KWS_DEFAULT_WEIGHT_PATH);

	if(Status == XST_SUCCESS) {
		xil_printf("\r\nKWS engine initialization successful;\r\n");
	} else {
		xil_printf("\r\nKWS engine initialization failed; inference disabled\r\n");
	}
	// read input from SD
	//

	// start inference
    u32 classIndex = 0U;
    float confidence = 0.0f;
    //
    Status = KwsEngine_ProcessRecording((const int32_t *)MEM_BASE_ADDR,
                                        NR_AUDIO_SAMPLES,
                                        &classIndex,
                                        &confidence);
    if (Status == XST_SUCCESS)
    {
		int scaled = (int)(confidence * 10000.0f + 0.5f);
		Demo.u32KwsClass = classIndex;
		Demo.fKwsConfidence = confidence;
		Demo.fKwsResultValid = 1;
		xil_printf("\r\nKWS inference: class %lu (confidence %d.%02d%%)",
				(unsigned long)classIndex,
				scaled / 100,
				scaled % 100);
    }
    else
    {
		xil_printf("\r\nKWS inference failed");
    }
	return 0;
}

